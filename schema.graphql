### Protocol Level ###
type Protocol @entity {
  id: Bytes!
  vaults: [Vault!] @derivedFrom(field: "protocol")
  investCount: BigInt!
  investedAmount: BigInt!
  withdrawCount: BigInt!
  withdrawnAmount: BigInt!
  totalValueLocked: BigInt!
  tradeFee: BigInt!
  withdrawalFee: BigInt!
  acceptedToken: Token!

  " Total number of unique addresses that have interacted with the protocol "
  cumulativeUniqueUsers: Int!
}

### Vault Level ###
type Vault @entity {
  id: Bytes!

  " Swap Vault or Leverage Vault"
  type: String!

  " link to the protocol entity "
  protocol: Protocol!

  AUM: BigDecimal!
  tokenBalances: BigInt!
  investCount: BigInt!
  investedAmount: BigInt!
  invests: [Invest!] @derivedFrom(field: "vault")
  withdrawCount: BigInt!
  withdrawnAmount: BigInt!
  withdrawRequest: [Withdraw!] @derivedFrom(field: "vault")
  createdAt: BigInt!
  vaultDailySnapshots: [VaultDaily!] @derivedFrom(field: "vault")
  latestDailySnapshot: String!
  trades: [Trade!]! @derivedFrom(field: "vault")

  " Is the vault paused "
  isPaused: Boolean!
}

type VaultDaily @entity {
  id: ID!
  day: BigInt!
  timestamp: BigInt!
  vault: Vault!
  AUM: BigDecimal!
}

### Account Level ###
type Account @entity {
  id: Bytes!
  invests: [Invest!] @derivedFrom(field: "account")
  investedAmount: BigInt!
  investCount: BigInt!
  withdrawRequests: [Withdraw!] @derivedFrom(field: "account")
  withdrawnAmount: BigInt!
  withdrawCount: BigInt!
}

"Describes an accounts relationship with a vault"
type Position @entity {
  id: ID!
  account: Account
  vault: Vault
  "not sure if this will be a BigDecimal or an array of BigInt's depends on how users interact with a vault"
  totalInvestedAmount: BigDecimal!
  totalWithdrawAmount: BigDecimal!
  currentValue: BigDecimal!
}

### Tokens used in Protocol ###
type Token @entity {
  id: Bytes!
  name: String!
  symbol: String!
  decimals: Int!
}

### Events ###
type Invest @entity(immutable: true) {
  id: ID!
  hash: Bytes!
  eventLog: BigInt!
  account: Account!
  amount: BigInt!
  token: Token!
  vault: Vault!
}

" Reqest to withdraw "
type Withdraw @entity(immutable: true) {
  id: ID!
  hash: Bytes
  eventLog: BigInt
  account: Account
  amount: BigInt
  token: Token
  vault: Vault
}

" The settlement of a withdrawal request "
type WithdrawTrade @entity(immutable: true) {
  id: ID!
  hash: Bytes
  eventLog: BigInt
  account: Account
  amount: BigInt
  token: Token
}

#I'm asuming the vault will emit some type of trade event
type Trade @entity(immutable: true) {
  id: ID!
  hash: Bytes
  eventLog: BigInt
  vault: Vault
  amount: BigInt
  token: Token
}
